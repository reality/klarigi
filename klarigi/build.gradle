/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.0/userguide/building_java_projects.html
 */



plugins {
    // Apply the groovy Plugin to add support for Groovy.
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'jacoco'
    id 'com.github.dawnwords.jacoco.badge' version '0.2.0'

}

java {
    toolchain {
            languageVersion.set(JavaLanguageVersion.of(10))
                }
                }

//sourceCompatibility = '11'
//targetCompatibility = '11'

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'

    // This dependency is used by the application.
    //implementation 'com.google.guava:guava:30.0-jre'

    // CLI Builoder 
    implementation 'commons-cli:commons-cli:1.4'

    implementation group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.30'
    configurations.all {
       exclude group: 'org.slf4j', module: 'slf4j-log4j12'
       }
    
    // OWLAPI/Elk
    implementation 'org.semanticweb.elk:elk-owlapi:0.4.3'
    implementation 'net.sourceforge.owlapi:owlapi-api:4.5.19'
    implementation 'net.sourceforge.owlapi:owlapi-apibinding:4.5.19'
    implementation 'net.sourceforge.owlapi:owlapi-impl:4.5.19'
    implementation 'net.sourceforge.owlapi:owlapi-parsers:4.5.19'
    implementation 'net.sourceforge.owlapi:owlapi-distribution:4.5.19'

    implementation 'org.codehaus.gpars:gpars:1.2.1'

    implementation group: 'be.cylab', name: 'java-roc', version: '0.0.6'

    // SML
    implementation 'com.github.sharispe:slib-sml:0.9.1'

    testImplementation 'org.spockframework:spock-core:2.0-M4-groovy-3.0'


}

application {
    // Define the main class for the application.
    mainClass = 'klarigi.App'
}

jacoco {
  toolVersion = '0.8.7'
}

test {
  useJUnitPlatform()
  maxHeapSize = "6G" 
  testLogging {
    events "started", "skipped", "failed"
    exceptionFormat "full"
  }
  finalizedBy jacocoTestReport // report is always generated after tests run
}

/*jacocoTestReport {
  dependsOn test // tests are required to run before generating the report
  reports {
    xml.enabled true 
  }
}*/

version = '0.1.3-SNAPSHOT'
